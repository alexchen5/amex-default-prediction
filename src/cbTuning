import pandas as pd
from sklearn.metrics import make_scorer
from sklearn.model_selection import GridSearchCV
import catboost as cb
import matplotlib as plt
from amex_metric import amex_metric

x_train = pd.read_parquet(f'../test_input/shrunk_train.parquet')
y_train = pd.read_csv(f'../test_input/shrunk_train_label.csv').target.values
x_test = pd.read_parquet(f'../test_input/shrunk_test.parquet')

def lgb_amex_metric(y_true, y_pred):
    """The competition metric with lightgbm's calling convention"""
    return ('amex',
            amex_metric(y_true, y_pred),
            True)

cb_params = {
    'iterations': 250,
    'learning_rate': 0.5,
    'depth': 3,
    'l2_leaf_reg': 40,
    'bootstrap_type': 'Bernoulli',
    'subsample': 0.7,
    'scale_pos_weight': 5,
    'eval_metric': [lgb_amex_metric],
    'od_type': 'Iter',
    'allow_writing_files': False
}

features = [f for f in x_train.columns if f != 'customer_ID' and f != 'target']

scoring = make_scorer(amex_metric, greater_is_better=True)

param_test1 = {
 'depth':range(1,10,1)
}
param_test2 = {
 'iterations':[100, 250, 500, 1000],
 'learning_rate':[0.03,0.001,0.01,0.1,0.2,0.3]
}
param_test3 = {
 'l2_leaf_reg':[1, 3, 5, 10, 100]
}
param_test4 = {
 'border_count':[5,10,20,50,100,200],
}

gsearch1 = GridSearchCV(estimator = cb.CatBoostClassifier(iterations= 1000,
    learning_rate= 0.2,
    depth= 5,
    l2_leaf_reg= 3,
    bootstrap_type= 'Bernoulli',
    subsample= 0.7,
    scale_pos_weight= 5,
    border_count=20,
    random_seed=1),
 param_grid = param_test2, scoring=scoring,n_jobs=4, cv=5)
gsearch1.fit(x_train[features], y_train)
# print(gsearch1.cv_results_)
print(gsearch1.best_params_) 
print(gsearch1.best_score_)